class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][3];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < 2; j++) {
                for(int k = 0; k < 3; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return solve(prices, dp, 0, 1, 2);
    }
    public int solve(int[] prices, int[][][] dp, int idx, int canBuy, int transactions) {
        if(idx == prices.length || transactions == 0) return 0;

        if(dp[idx][canBuy][transactions] != -1) {
            return dp[idx][canBuy][transactions];
        }

        int profit = 0;
        if(canBuy == 1) {
            int buy = -prices[idx] + solve(prices, dp, idx + 1, 0, transactions);
            int noBuy = solve(prices, dp, idx + 1, 1, transactions);
            
            profit = Math.max(buy, noBuy);
        }
        else {
            int sell = prices[idx] + solve(prices, dp, idx + 1, 1, transactions - 1);
            int noSell = solve(prices, dp, idx + 1, 0, transactions);

            profit = Math.max(sell, noSell);
        }
        return dp[idx][canBuy][transactions] = profit;
    }
}